---
title: "Starting to learn Rust"
date: "2023-08-17"
description: "Trimming UMI"
image: rust-logo.png
image-alt: "Rust logo"
categories:
  - Rust
---


## Rationale

I am very happy with {{< fa brands r-project >}} but I want to learn something new, another programming language.
The desire comes with several needs

### Opposite of R:

- A _compiled_ language
    + Speed
    + Strict syntax, almost pedantic 
- Strongly _typed_

### Similarities to R:

- Full of functional programming
- Great _packages_ offered by a great community ([**crates**](https://crates.io))

Turns out this language is [**Rust**](https://www.rust-lang.org/).

## Advantages

### Compiler

It is incredibly helpful. I am using [VScode](https://code.visualstudio.com/) with the extension 
`rust-analyser` that provides immediate feedback, great suggestions to both warnings and errors.

### Bonus: the {{< fa brands rust >}} logo

It has the two things I like a lot: 

- A {{< fa gear >}} from {{< fa bicycle >}} (a _chainring_)
- A big **R** that looks very much like {{< fa brands r-project >}}

![Rust logo](https://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/Rust_programming_language_black_logo.svg/1024px-Rust_programming_language_black_logo.svg.png){width=200px fig-alt="Rust logo" fig-align="left"}

## Learning material

::: {.column-margin}
![](oreilly-rust.jpeg)
:::

I am using so far three resources:

- The [Programming **Rust**](https://www.oreilly.com/library/view/programming-rust-2nd/9781492052586/) book (Ed. O'Reilly). From a recommendation by [Stefan Baumgartner](https://mastodon.social/@deadparrot)




- The official [documentation](https://doc.rust-lang.org/book/ch00-00-introduction.html) that include a lot of example.
- The ["How to learn Rust" course](https://learning.accelerant.dev/view/courses/how-to-learn-rust) by Tim McManara. From a recommendation of [Jonathan Caroll](https://jcarroll.com.au)

## First project: UMI trimming

**UMI** stands for Unique Molecular Identifier.

The goal is reproduce some features from [`umi-tools`](https://umi-tools.readthedocs.io/en/latest/QUICK_START.html)
especially the `extract` command.

For example, convert the following read

``` bash
@VH00666:90:AAAWVCCHV:1:1101:24026:1000
GTCAGTTATAGCGGGCGCGCAAAAAAAAAAAAAAAAAAAGATCGGAAGAGCACACGTCTGAACTCCAGTCACTCCC
[...]
```

into:

``` bash
@VH00666:90:AAAWVCCHV:1:1101:24026:1000_GTCAGT
GCGGGCGCGCAAAAAAAAAAAAAAAAAAAGATCGGAAGAGCACACGTCTGAACTCCAGTCACTCCC
```

The UMI was **GTCAGT** and appended to the read **name**, while being removed from the sequence along with the **TATA** linker.

This project is [here on {{< fa brands github >}}](https://github.com/ginolhac/umi_trim)
